<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuli.community.mapper.PostsMapper">
    
    <resultMap type="Posts" id="PostsResult">
        <result property="postsId"    column="posts_id"    />
        <result property="usersId"    column="users_id"    />
        <result property="postsTitle"    column="posts_title"    />
        <result property="postsImage"    column="posts_image"    />
        <result property="postsContent"    column="posts_content"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectPostsVo">
        select posts_id, users_id, posts_title, posts_image, posts_content, create_time, update_time from posts
    </sql>

    <select id="selectPostsList" parameterType="Posts" resultMap="PostsResult">
        <include refid="selectPostsVo"/>
        <where>  
            <if test="usersId != null "> and users_id = #{usersId}</if>
            <if test="postsTitle != null  and postsTitle != ''"> and posts_title = #{postsTitle}</if>
            <if test="postsImage != null  and postsImage != ''"> and posts_image = #{postsImage}</if>
            <if test="postsContent != null  and postsContent != ''"> and posts_content = #{postsContent}</if>
        </where>
    </select>
    
    <select id="selectPostsByPostsId" parameterType="Long" resultMap="PostsResult">
        <include refid="selectPostsVo"/>
        where posts_id = #{postsId}
    </select>
        
    <insert id="insertPosts" parameterType="Posts" useGeneratedKeys="true" keyProperty="postsId">
        insert into posts
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="usersId != null">users_id,</if>
            <if test="postsTitle != null">posts_title,</if>
            <if test="postsImage != null">posts_image,</if>
            <if test="postsContent != null">posts_content,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="usersId != null">#{usersId},</if>
            <if test="postsTitle != null">#{postsTitle},</if>
            <if test="postsImage != null">#{postsImage},</if>
            <if test="postsContent != null">#{postsContent},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updatePosts" parameterType="Posts">
        update posts
        <trim prefix="SET" suffixOverrides=",">
            <if test="usersId != null">users_id = #{usersId},</if>
            <if test="postsTitle != null">posts_title = #{postsTitle},</if>
            <if test="postsImage != null">posts_image = #{postsImage},</if>
            <if test="postsContent != null">posts_content = #{postsContent},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where posts_id = #{postsId}
    </update>

    <delete id="deletePostsByPostsId" parameterType="Long">
        delete from posts where posts_id = #{postsId}
    </delete>

    <delete id="deletePostsByPostsIds" parameterType="String">
        delete from posts where posts_id in 
        <foreach item="postsId" collection="array" open="(" separator="," close=")">
            #{postsId}
        </foreach>
    </delete>

    <resultMap id="findAllmap" type="posts">
        <id column="posts_id" property="postsId"/>
        <result column="posts_title" property="postsTitle"/>
        <result column="posts_image" property="postsImage"/>
        <result column="posts_content" property="postsContent"/>
        <result column="create_time" property="createTime"/>
        <result column="like_count" property="likesnum"></result>
       <association property="users" javaType="users">
           <id column="users_id" property="usersId"></id>
           <result column="users_name" property="usersName"></result>
           <result column="users_image" property="usersImage"></result>
       </association>
        <collection property="commentsList" ofType="comments">
            <id column="comments_id" property="commentsId"></id>
            <result column="comments_content" property="commentsContent"></result>
        </collection>
    </resultMap>

    <select id="findAll" resultMap="findAllmap">
        SELECT
            p.posts_id,
            p.posts_image,
            p.posts_content,
            p.posts_title,
            c.comments_id,
            c.comments_content,
            u.users_id,
            u.users_name,
            u.users_image,
            COUNT(l.users_id) AS like_count
        FROM
            posts p
                LEFT JOIN
            likes l ON p.posts_id = l.posts_id
                LEFT JOIN
            comments c on c.posts_id=p.posts_id
                LEFT JOIN
            users u on u.users_id=p.users_id
        GROUP BY
            p.posts_id,p.posts_image,
            p.posts_content,
            p.posts_title,
            c.comments_id,
            c.comments_content,
            u.users_id,
            u.users_name,
            u.users_image
        ORDER BY
            p.posts_id;
    </select>
</mapper>